
import java_cup.runtime.*;

action code {:
  // cria uma instancia da maquina
  CIMS maquina = new CIMS();
:} ;

parser code {:
  Yylex lexer;

  public void report_error(String message, Object error_info) {
    Symbol info = (Symbol) error_info;

    System.err.print("** " + message);
    System.err.println(" at `" + info.value + "' in position " + info.left
		       + " **");
  }

  public void report_fatal_error(String message, Object obj) {
    System.err.println("** " + message);
  }
:} ;

init with {: lexer = new Yylex(System.in); :} ;

scan with {: return lexer.yylex(); :} ;

terminal        CHAMA, LOCAIS, REGRESSA, COLOCA_ARG ;
terminal        EMPILHA_VAR, EMPILHA_ARG, EMPILHA, ATRIBUI_VAR, ATRIBUI_ARG ;
terminal        SOMA, SUB, MULT, DIV , MOD, EXP;
terminal        SIGUAL, SMENOR, SALTA ;
terminal        ESCREVE_INT, ESCREVE_STR, MUDA_LINHA ;
terminal String IDENTIFICADOR ;
terminal String	INTEIRO, STRING ;
terminal        DOIS_PONTOS;
terminal	ERRO ;

non terminal CIMS programa ;
non terminal      etiqueta, instrucao ;

programa ::= programa etiqueta instrucao
	       {: RESULT = maquina; :}
         |
	 ;
etiqueta ::= IDENTIFICADOR:e DOIS_PONTOS
				{: maquina.add_Label(new Label(e.toString(), maquina.getMemoriaSize())); :}
	 |
	 ;
instrucao ::= CHAMA INTEIRO:d IDENTIFICADOR:p
				{: maquina.add_Inst(new Chama(
											Integer.parseInt(d.toString()),2
											p.toString())); :}
	  |   LOCAIS INTEIRO:a INTEIRO:v
	  			{: maquina.add_Inst(new Locais(
	  										Integer.parseInt(a.toString()),
	  										Integer.parseInt(v.toString()))); :}
	  |   REGRESSA
	  			{: maquina.add_Inst(new Regressa()); :}
	  |   COLOCA_ARG INTEIRO:n
	  			{: maquina.add_Inst(new Coloca_arg(
	  										Integer.parseInt(n.toString()))); :}
	  |   EMPILHA_VAR INTEIRO:d INTEIRO:n
	  			{: maquina.add_Inst(new Empilha_var(
	  										Integer.parseInt(d.toString()),
	  										Integer.parseInt(n.toString()))); :}
	  |   EMPILHA_ARG INTEIRO:d INTEIRO:n
				{: maquina.add_Inst(new Empilha_arg(
											Integer.parseInt(d.toString()),
											Integer.parseInt(n.toString()))); :}
	  |   EMPILHA INTEIRO:i
	  			{: maquina.add_Inst(new Empilha(
	  										Integer.parseInt(i.toString()))); :}
	  |   ATRIBUI_VAR INTEIRO:d INTEIRO:n
	  			{: maquina.add_Inst(new Atribui_var(
	  										Integer.parseInt(d.toString()),
	  										Integer.parseInt(n.toString()))); :}
	  |   ATRIBUI_ARG INTEIRO:d INTEIRO:n
	  			{: maquina.add_Inst(new Atribui_arg(
											Integer.parseInt(d.toString()),
											Integer.parseInt(n.toString()))); :}
	  |   SOMA
	  			{: maquina.add_Inst(new Soma()); :}
	  |   SUB
	  			{: maquina.add_Inst(new Sub()); :}
	  |   MULT
	  			{: maquina.add_Inst(new Mult()); :}
	  |   DIV
	  			{: maquina.add_Inst(new Div()); :}
	  |   MOD
	  			{: maquina.add_Inst(new Mod()); :}
	  |   EXP
	  			{: maquina.add_Inst(new Exp()); :}
	  |   SIGUAL IDENTIFICADOR:e
	  			{: maquina.add_Inst(new Sigual(
	  										e.toString())); :}
	  |   SMENOR IDENTIFICADOR:e
	  			{: maquina.add_Inst(new Smenor(
	  										e.toString())); :}
	  |   SALTA IDENTIFICADOR:e
	  			{: maquina.add_Inst(new Salta(
	  										e.toString())); :}
	  |   ESCREVE_INT
	  			{: maquina.add_Inst(new Escreve_int()); :}
	  |   ESCREVE_STR STRING:s
	  			{: maquina.add_Inst(new Escreve_str(
	  										s.toString())); :}
	  |   MUDA_LINHA
	  			{: maquina.add_Inst(new Muda_linha()); :}
	  ;
